---
title: Hello, Quarto
date: "2023-08-10"
authors: [admin] # this is specific to wowchemy
categories: 
  - Website
  - Coding
format: hugo-md
#jupyter: python3
---



## Quarto Document

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

### R code

```{r}
#| label: load-packages
#| include: false

library(tidyverse)
library(palmerpenguins)
```

![](https://raw.githubusercontent.com/quarto-dev/quarto-web/main/docs/get-started/hello/rstudio/lter_penguins.png){style="float:right;" fig-alt="Illustration of three species of Palmer Archipelago penguins: Chinstrap, Gentoo, and Adelie. Artwork by @allison_horst." width="401"}

The `penguins` data from the [**palmerpenguins**](https://allisonhorst.github.io/palmerpenguins "palmerpenguins R package") package contains size measurements for `r nrow(penguins)` penguins from three species observed on three islands in the Palmer Archipelago, Antarctica.

The plot below shows the relationship between flipper and bill lengths of these penguins.

```{r}
#| label: plot-penguins
#| warning: false
#| echo: false

ggplot(
    penguins,
    aes(x = flipper_length_mm, y = bill_length_mm)
) +
    geom_point(aes(color = species, shape = species)) +
    scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
    labs(
        title = "Flipper and bill length",
        subtitle = "Dimensions for penguins at Palmer Station LTER",
        x = "Flipper length (mm)", y = "Bill length (mm)",
        color = "Penguin species", shape = "Penguin species"
    ) +
    theme_minimal()
```


### Python

And now I use python in the same document see the @fig-polar.

::: {.callout-note}
I needed to install `nbclient` using pip to make it work.
:::

```{python}
#| label: fig-polar
#| fig-cap: "A line plot on a polar axis"
#| echo: false

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={"projection": "polar"})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

